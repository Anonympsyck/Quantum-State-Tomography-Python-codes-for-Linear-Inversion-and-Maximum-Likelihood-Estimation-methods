import numpy as np
3 from numpy . linalg import eig
4 from scipy . optimize import fmin_bfgs
5 import math
6
7 def f1 (v):
8
9 Ta = np . array ([[ v [0] , v [4]+ complex (0 ,1) *v [5] , v [6]+ complex (0 ,1) *v [7] ,
10 v [10]+ complex (0 ,1) *v [11]] ,[0 , v [1] , v [8]+ complex (0 ,1) *v
[9] ,
11 v [12]+ complex (0 ,1) *v [13]] ,[0 ,0 , v [2] ,
12 v [14]+ complex (0 ,1) *v [15]] ,[0 ,0 ,0 , v [3]]])
13
14 T_dagger = Ta . conj () .T
15
16 A = np . dot ( T_dagger , Ta )
17
18 k = 0
19 for i in range (4) :
20 k = k + A[i ][ i]
21
22 Density_2 = (1/ k)*A
23
24
25 eig_value , eig_vec = eig ( Density_2 )
26
27 matrix = np . array ([[40230 , 150 ,220 , 39094] ,
28 [19970 , 20533 ,18542 , 20050] ,
29 [21988 ,18910 , 18003 , 21054] ,
30 [20556 , 19706 , 20010 ,18629] ,
31 [333 ,39918 , 38011 , 440] ,
32 [20475 ,19975 , 18931 , 19544] ,
33 [19900 , 19649 , 20761 , 19330] ,
34 [17423 , 21755 ,21207 ,18804] ,
35 [38717 , 401 , 483 , 39382]])
36 p = 0
37 Norm = 0
38 for i in range (4) :
39 for j in range (4) :
40 p = p + matrix [i ][ j]
41 Norm = 0.25* p
42
43 h = np . array ([[1] ,[0]])
44 v = np . array ([[0] ,[1]])
45 d = np . array ([[1/(2**(1/2) ) ] ,[1/(2**(1/2) ) ]])
46 a = np . array ([[1/(2**(1/2) ) ] ,[ -1/(2**(1/2) ) ]])
47 l = np . array ([[1/(2**(1/2) ) ] ,[ complex (0 ,1) *1/(2**(1/2) ) ]])
48 r = np . array ([[1/(2**(1/2) ) ] ,[ - complex (0 ,1) *1/(2**(1/2) ) ]])
49
50 ket = np . array ([[ np . kron (h ,h) ,np . kron (h ,v) ,np . kron (v ,h) ,np . kron (v ,v)],
51 [ np . kron (h ,d) ,np . kron (h ,a) ,np . kron (v ,d) ,np . kron (v ,a)],
52 [ np . kron (h ,r) ,np . kron (h ,l) ,np . kron (v ,r) ,np . kron (v ,l)],
53 [ np . kron (d ,h) ,np . kron (d ,v) ,np . kron (a ,h) ,np . kron (a ,v)],
54 [ np . kron (d ,d) ,np . kron (d ,a) ,np . kron (a ,d) ,np . kron (a ,a)],
55 [ np . kron (d ,r) ,np . kron (d ,l) ,np . kron (a ,r) ,np . kron (a ,l)],
56 [ np . kron (r ,h) ,np . kron (r ,v) ,np . kron (l ,h) ,np . kron (l ,v)],
57 [ np . kron (r ,d) ,np . kron (r ,a) ,np . kron (l ,d) ,np . kron (l ,a)],
58 [ np . kron (r ,r) ,np . kron (r ,l) ,np . kron (l ,r) ,np . kron (l ,l) ]])
59
60 def f2 (i ,j):
61 bra = ket [i ][ j ]. conj () .T
62 p = np . dot ( bra , Density_2 )
63 q = np . dot (p , ket [i ][ j ])
64 y = q. real
65
66 return y
67 Fun2 = 0
68
69 for i in range (9) :
70 for j in range (4) :
71 Fun2 = Fun2 + (( Norm * f2 (i ,j) - matrix [i ][ j ]) **2) /(2* Norm *f2 (i ,
j)) + 0.5* math . log ( Norm * f2 (i ,j))
72
73 return Fun2 . ravel ()
74
75
76 v1 = np . array
([0.01 ,0.01 ,0.01 ,0.01 ,0.01 ,0.01 ,0.01 ,0.01 ,0.01 ,0.01 ,0.01 ,0.01 ,
77 0.01 ,0.01 ,0.01 ,0.01])
78
79 v = fmin_bfgs (f1 , v1 )
80
81 Ta = np . array ([[ v [0] , v [4]+ complex (0 ,1) *v [5] , v [6]+ complex (0 ,1) *v [7] , v [10]+
complex (0 ,1) *v [11]] ,[0 , v [1] , v [8]+ complex (0 ,1) *v [9] , v [12]+ complex (0 ,1) *v
[13]] ,[0 ,0 , v [2] , v [14]+ complex (0 ,1) *v [15]] ,[0 ,0 ,0 , v [3]]])
82
83 T_dagger = Ta . conj () .T
84
85 A = np . dot ( T_dagger , Ta )
86 k = 0
87 for i in range (4) :
88 k = k + A[i ][ i]
89 Density_2 = (1/ k)*A
90
91 print ( Density_2 )
92 w ,v = eig ( Density_2 )
93 print (’ Eigenvalues are : ’,w)
94
80
95 Density_square = np . dot ( Density_2 , Density_2 )
96 k = 0
97 p = 0
98 for i in range (4) :
99
100 k = k + Density_square [i ][ i]
101 p = p + Density_2 [i ][ i]
102
103 print (’ The trace of square density matrix is : ’,k ," The trace of density
matrix is :",p)
